name: Build, Test, Deploy, Verify
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy to"
        options:
          - "staging"
          - "production"
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build_test_deploy_verify:
    if: github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.47.2-noble
    environment: ${{ inputs.environment || (github.ref_name == 'main' && 'production' || 'staging' )}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ENVIRONMENT: ${{ inputs.environment || (github.ref_name == 'main' && 'production' || 'staging' )}}
      GOOGLE_APPLICATION_CREDENTIALS: "/opt/gcp_key.json"
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: "17"
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Setup
        run: |
          npm ci
          npm i -g firebase-tools vercel
          su -c "apt-get update && apt-get install tmux -y"
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > /opt/gcp_key.json
          firebase use ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      - name: Test Firebase Functions
        run: npm run test --workspace functions
        env:
          TEST_DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
      - name: Run e2e tests
        run: npm run test --workspace e2e
        env:
          BASE_URL: http://localhost:3000
          TEST_DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
          FIREBASE_AUTH_EMULATOR_HOST: "127.0.0.1:9099"
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "127.0.0.1:9099"
      - name: Build
        run: npm run build:ci
      - name: Deploy
        run: npm run deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Verify Deployment
        run: npm run test --workspace e2e
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: |
            packages/e2e/playwright-report/
            packages/e2e/functions.log
            packages/e2e/web.log
          retention-days: 30
      - name: Cleanup
        if: always()
        run: |
          shred -uv /opt/gcp_key.json
          shred -uv apps/functions/.env
